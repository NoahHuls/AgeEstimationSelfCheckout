@page
@model ScanModel
@{
    ViewData["Title"] = "Scan page";
}
<div class="row h-100">
    <video id="video" width="640" height="480" autoplay style="display:none;"></video>
    <canvas id="canvas" width="640" height="480" style="display:none;"></canvas>
    <div class="col-4">
        <h1 class="text-white">Scannen</h1>
        <div class="card h-75">
            <button class="btn btn-primary mb-1" onclick="location.href='?action=addBread'">Brood</button>
            <button class="btn btn-primary mb-1" onclick="location.href='?action=addBeer'">Bier</button>
            <button class="btn btn-primary mb-1" onclick="location.href='?action=addCheese'">Kaas</button>

            <div id="timerCard" class="card mt-3 p-3" style="display: @(ScanModel.AgeVerificationIsAltered ? "none" : "block")">
                <h5>Automatische Leeftijdscontrole</h5>
                <button id="startTimerButton" class="btn btn-success position-relative" onclick="activateAutomaticAgeVerification()">
                    <span id="buttonText">Activeer</span>
                    <div id="progressBar" class="progress" style="display: none; height: 5px;">
                        <div id="progress" class="progress-bar progress-bar-animated" role="progressbar" style="width: 100%; height: 100%;"></div>
                    </div>
                </button>
                <button class="btn btn-link ms-2" onclick="closeTimerCard()" style="text-decoration: none;">Ik wil niet gebruik maken van automatische leeftijdscontrole</button>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col-3">
                <div class="card text-center mb-4" style="width: 80px; height: 60px;">
                    <p>Help</p>
                </div>
            </div>
            <div class="col-3">
                <div class="card text-center mb-4" style="width: 80px; height: 60px;">
                    <p>NL</p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-7 offset-1" style="align-content: end;">
        <div class="d-flex align-items-center p-3">
            <form method="post" asp-page-handler="Toggle">
                <div class="form-check">
                    <input class="form-check-input"
                           type="checkbox"
                           id="toggleAutomaticAgeVerification"
                           name="isAutomaticAgeVerificationEnabled"
                           value="true"
                           onchange="this.form.submit()"
                    @(ScanModel.AutomaticAgeVerification ? "checked" : "") />
                    <label class="form-check-label text-white" for="toggleAutomaticAgeVerification">
                        Gebruik automatische leeftijdscontrole
                    </label>
                </div>
            </form>
            <button class="btn btn-primary ms-3" onclick="showPopup('Er worden fotos gemaakt, op basis van deze fotos wordt uw leeftijd geschat. De fotos worden niet bewaard of voor andere doelinde gebruikt.')">I</button>
        </div>
        <div class="card d-flex flex-column" style="height: 90%;">
            @{
                var GroupedProducts = ScanModel.Products.GroupBy(x => x.Name);
                decimal TotalPrice = 0;
                bool ScannedAlcohol = ScanModel.Products.Any(e => e.IsAgeRestricted);
            }
            <div class="flex-grow-1">
                @foreach (var products in GroupedProducts)
                {
                    <div class="row p-3 product-row pt-5">
                        <div class="col-1">@(products.Count())</div>
                        <div class="col-8">@products.First().Name</div>
                        <div class="col-1">@(products.First().IsAgeRestricted ? "18+" : "")</div>
                        <div class="col-2 text-end">@(products.First().Price * products.Count())</div>
                        @{
                            TotalPrice += products.First().Price * products.Count();
                        }
                    </div>
                }
            </div>
            <div class="row pb-5">
                <div class="col-8 p-3">
@*                     <form method="post" asp-page="/Payment">
                        <input type="hidden" asp-for="@TotalPrice" />
                        <input type="hidden" asp-for="@ScannedAlcohol" />
                        <input type="hidden" asp-for="@ScanModel.AutomaticAgeVerification" />
                        <button type="submit" class="btn btn-primary w-100">Afrekenen</button>
                    </form> *@
                    <form method="post" asp-page-handler="ToEmployee">
                        <button type="submit" class="btn btn-primary w-100">Afrekenen</button>
                    </form>
                </div>
                <div class="col-2 text-end p-3">
                    @* Bonus kaart maybe *@
                </div>
                <div class="col-2 text-end p-3">
                    <p>@TotalPrice</p>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="Countdown" value="@ScanModel.Countdown" />

<script>
    let amountOfPictures = 5;
    let waitSecondsBetweenPictures = 1;

    let timer;
    let countdown = document.getElementById("Countdown").value;

    window.onload = function () {
        if (!document.getElementById("toggleAutomaticAgeVerification").checked && document.getElementById("timerCard").style.display !== "none") {
            startTimer();
        }
        capturePhotos();
    };

    function startTimer() {
        document.getElementById("progressBar").style.display = "block";
        document.getElementById("buttonText").innerText = "Ik wil gebuik maken van automatische leeftijdsconrole";

        let progressBar = document.getElementById("progress");
        let width = 100;
        width -= (15 - countdown + 1) * 100/15;

        timer = setInterval(() => {
            width -= 100 / 15
            progressBar.style.width = width + '%';

            if (width <= 0) {
                clearInterval(timer);
                activateAutomaticAgeVerification();
            }
        }, 1000);
    }

    function activateAutomaticAgeVerification() {
        document.getElementById("toggleAutomaticAgeVerification").checked = true;
        document.getElementById("toggleAutomaticAgeVerification").dispatchEvent(new Event('change'));
        closeTimerCard();
        setAttemptedToEnable();
    }

    function closeTimerCard() {
        clearInterval(timer);
        document.getElementById("timerCard").style.display = "none";
        document.getElementById("startTimerButton").disabled = false;
        document.getElementById("progressBar").style.display = "none";
        document.getElementById("progress").style.width = '100%';
    }

    function setAttemptedToEnable() {
        let input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'hasAttemptedToEnable';
        input.value = 'true';
        document.querySelector('form[method="post"]').appendChild(input);
        document.querySelector('form[method="post"]').submit();
    }

    async function setupCamera() {
        const video = document.getElementById('video');
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = stream;
        return new Promise((resolve) => {
            video.onloadedmetadata = () => {
                resolve(video);
            };
        });
    }

    async function saveImage(dataUrl, imageName) {
        const response = await fetch('/api/image/upload', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ imageData: dataUrl, imageName: imageName })
        });

        if (!response.ok) {
            console.error('Image upload failed:', response.statusText);
        } else {
            console.log('Image uploaded successfully:', imageName);
        }
    }

    async function capturePhotos() {
        const video = await setupCamera();
        const canvas = document.getElementById('canvas');
        const context = canvas.getContext('2d');

        for (let i = 1; i <= amountOfPictures; i++) {
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            const dataUrl = canvas.toDataURL('image/png');
            await saveImage(dataUrl, `photo_${Math.floor(Math.random() * 100)}.png`);
            await new Promise(resolve => setTimeout(resolve, waitSecondsBetweenPictures * 1000));
        }

        video.srcObject.getTracks().forEach(track => track.stop());
    }
</script>